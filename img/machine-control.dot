digraph beagleg {
	node [fontsize=10, fontname="Helvetica"];
	edge [fontsize=10, fontname="Helvetica"];

	{
		node [ shape=oval ];
		TCP [label = "TCP socket"];
	}

	// All the processing nodes, displayed as boxes.
	{
		node [ shape=box ];
		GCodeParser;
		GCodeMachineControl [ label = "GCodeMachineControl\nGCode Actions"];
		HardwareMapping;
		Planner;

		MotorOperations  [label = "MotorOperations\nPass LinearSegmentSteps\nto backend"];

		MotionQueueMotorOperations  [label = "MotionQueueMotorOperations\nConvert segments\ninto MotionSegment commands\nfor MotionQueue implementations."];

		DummyMotionQueue [label = "DummyMotionQueue\nfor dryrun.", style=dotted];
		PRUMotionQueue;
		SimFirmwareQueue [label = "SimFirmwareQueue\nSimulating PRU", style=dotted];
		SimFirmwareAudioQueue [label = "SimFirmwareAudioQueue\nOutputs stepper clocks as *.wav file.", style=dotted];
		GCode2PS [ style=dotted];
		//PrintStats [ style=dotted, label="gcode-print-stats\nutility"];

		PruHardwareInterface;
	}

	// Inputs, and configuration files
	{
		node [ shape=oval ];
		GCodeFile [label = "GCode File"];
		CapeConfig [ label = "Cape config in\nhardware/"];
		UserMapConfig [ label = "User config file:\nMapping sections"];
		UserAxisConfig [ label = "User config file:\nAxis sections"];
	}

	// Final action nodes
	{
		node [ shape=box, style=rounded ];
		GNUPlotOutput [ style = "dotted" ];
		PinToggeling [ label = "Pin Toggling,\nPWM control." ];
		PRU [ label = "PRU firmware\n(motor-interface-pru.p)" ];
	}

	GCodeFile -> GCodeParser [ label="G-Code", style=dotted];
	TCP -> GCodeParser  [ label="G-Code"];

	{
		GCodeParser -> GCodeMachineControl [ label=" Parse Events;\l Metric coordinates.\l Logic axes (X, Y, Z..)"]
		GCodeMachineControl -> Planner [ label=" Absolute target position sequence\l with desired speed." ];

		Planner -> MotorOperations [ label = " Delta LinearSegmentSteps\l Step coordinates.\l Logic axes assigned to motors 1, 2, 3..." ]
		// Various MotorOperations backends
		MotorOperations -> MotionQueueMotorOperations
		MotionQueueMotorOperations -> PRUMotionQueue;
		MotionQueueMotorOperations -> SimFirmwareQueue -> GNUPlotOutput;
		MotionQueueMotorOperations -> SimFirmwareAudioQueue;
		MotionQueueMotorOperations -> DummyMotionQueue;
		MotorOperations -> GCode2PS;
		//MotorOperations -> PrintStats;
		PRUMotionQueue -> PruHardwareInterface;
		PruHardwareInterface -> PRU [ label = " Host â†’ PRU\lringbuffer"];
	}

	{
		rank = same;
		GCodeMachineControl -> HardwareMapping [ label="Request Output\nPWM, Spindle, Fan...", rank=0];
		HardwareMapping -> GCodeMachineControl [ label = "Switch status." ];
	}

	HardwareMapping -> Planner [ label = "Axis -> motor mapping."];

	{
		rank = same;
		UserAxisConfig -> GCodeMachineControl;
	}

	CapeConfig -> HardwareMapping;
	UserMapConfig -> HardwareMapping;
	HardwareMapping -> PinToggeling;
}
